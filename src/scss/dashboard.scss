@use "common";

// TODO: Need to constrain to max-width of 10em but it will affect animation...
$menu-button-width: 56vw;
$menu-button-height: 8vh;
$menu-border-width: 0.5vh;
$inner-circle-diameter: $menu-button-height/2;

.dashboard {
  display: flex;
  flex-flow: column wrap;
  align-items: center;
  justify-content: space-evenly;
  box-sizing: border-box;
  min-height: 100vh;
  margin: auto;
}

.menu-button {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  white-space: nowrap;
  border-radius: 1000px;
  height: $menu-button-height;
  width: $menu-button-width;
  font-size: $menu-button-height/2;
  color: white;
  background-color: maroon;
  border: solid gold $menu-border-width;
  overflow: hidden;
  cursor: pointer;
  z-index: 1;
  box-sizing: border-box;
  user-select: none;
  @include common.prefix-property(backface-visibility, hidden);
}

.menu-button .button-circle {
  content: "";
  color: black;
  height: $inner-circle-diameter;
  width: $inner-circle-diameter;
  background-color: gold;
  border-radius: 100%;
  position: absolute;
  box-shadow: inset 0 0 0.5em white;
  left: 1.5vh;
  top: 50%;
  @include common.prefix-property(transform, translate(0, -50%));
  pointer-events: none;
  margin: 0;
  padding: 0;
  @include common.prefix-property(
    transition,
    transform 750ms ease 750ms,
    left 750ms,
    top 750ms
  );
  z-index: 2;
}

.menu-button span {
  @include common.prefix-property(transition, opacity 740ms);
  opacity: 1;
}

@include common.keyframes-animation(roll) {
  100% {
    width: $menu-button-height;
    letter-spacing: $menu-button-height * 1.5;
  }
}

@include common.keyframes-animation(unroll) {
  0% {
    width: $menu-button-height;
    letter-spacing: $menu-button-height * 1.5;
  }

  100% {
    width: $menu-button-width;
    letter-spacing: 0;
  }
}

@include common.keyframes-animation(expand) {
  0% {
    position: absolute;
    width: $inner-circle-diameter;
  }

  100% {
    position: absolute;
    border-radius: 0;
    @include common.prefix-property(transform, scale(100));
    background-color: teal;
  }
}

@include common.keyframes-animation(shrink) {
  0% {
    position: absolute;
    border-radius: 0;
    @include common.prefix-property(transform, scale(100));
    background-color: teal;
  }

  100% {
    position: absolute;
    width: $inner-circle-diameter;
    height: $inner-circle-diameter;
    @include common.prefix-property(transform, translate(0, -50%));
    background-color: gold;
  }
}

@include common.keyframes-animation(hide) {
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
}

@include common.keyframes-animation(reveal) {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

@include common.keyframes-animation(unwrap) {
  0% {
    overflow: hidden;
  }

  100% {
    overflow: visible;
  }
}

@include common.keyframes-animation(wrapp) {
  0% {
    overflow: visible;
  }

  100% {
    overflow: hidden;
  }
}

@include common.keyframes-animation(flash) {
  0%,
  50%,
  100% {
    opacity: 1;
  }

  25%,
  75% {
    opacity: 0;
  }
}

.flash {
  @include common.prefix-property(animation-name, flash);
  @include common.prefix-property(animation-duration, 750ms);
}

.full-roll {
  @include common.prefix-property(animation-name, roll, unroll);
  @include common.prefix-property(animation-duration, 750ms, 750ms);
  @include common.prefix-property(animation-delay, 0ms, 750ms);
  @include common.prefix-property(animation-fill-mode, forwards, forwards);
}

.modal-overlay {
  @include common.prefix-property(animation-name, roll, unwrap);
  @include common.prefix-property(animation-duration, 750ms, 0ms);
  @include common.prefix-property(animation-delay, 0ms, 750ms);
  @include common.prefix-property(animation-fill-mode, forwards, forwards);
}

.modal-overlay .button-circle {
  @include common.prefix-property(animation-name, expand);
  @include common.prefix-property(animation-duration, 750ms);
  @include common.prefix-property(animation-delay, 750ms);
  @include common.prefix-property(animation-fill-mode, forwards);
}

.modal-overlay span {
  @include common.prefix-property(animation-name, hide);
  @include common.prefix-property(animation-duration, 0ms);
  @include common.prefix-property(animation-delay, 750ms);
  @include common.prefix-property(animation-fill-mode, forwards);
}

.modal-retract {
  width: $menu-button-height;
  letter-spacing: $menu-button-height * 1.5;
  overflow: visible;
  @include common.prefix-property(animation-name, wrapp, unroll);
  @include common.prefix-property(animation-duration, 0s, 750ms);
  @include common.prefix-property(animation-delay, 750ms);
  @include common.prefix-property(animation-fill-mode, forwards);
}

.modal-retract .button-circle {
  position: absolute;
  @include common.prefix-property(animation-name, shrink);
  @include common.prefix-property(animation-duration, 750ms);
  @include common.prefix-property(animation-delay, 0);
  @include common.prefix-property(animation-fill-mode, forwards);
}

.modal-retract span {
  opacity: 0;
  @include common.prefix-property(animation-name, reveal);
  @include common.prefix-property(animation-duration, 0ms);
  @include common.prefix-property(animation-delay, 750ms);
  @include common.prefix-property(animation-fill-mode, forwards);
}

#about {
  z-index: 5;
  position: absolute;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  font-size: 4vh;
  visibility: hidden;
  overflow: hidden;
  opacity: 0;
  @include common.prefix-property(transition, opacity 500ms);
}

.close-button {
  position: fixed;
  top: 2vw;
  right: 2vw;
  width: 5vh;
  height: 5vh;
  border-radius: 1000px;
  background-color: white;
}

.button-container {
  display: flex;
  justify-content: center;
  position: relative;
  @include common.prefix-property(backface-visibility, hidden);
}

.ring {
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  width: $menu-button-height;
  height: $menu-button-height;
  border: solid gold $menu-border-width;
  border-radius: 50%;
  font-size: 4vh;
  @include common.prefix-property(transition, transform 750ms);
  @include common.prefix-property(backface-visibility, hidden);
}

.expand-options {
  @include common.prefix-property(
    transition,
    width 750ms,
    letter-spacing 750ms
  );
  width: $menu-button-width;
}

.expand-options.active {
  width: $menu-button-height;
  letter-spacing: $menu-button-height * 1.5;
}

.expand-options.expand-complete {
  @include common.prefix-property(
    transition,
    width 750ms ease 750ms,
    letter-spacing 750ms ease 750ms
  );
  overflow: visible;
}

.expand-options.expand-complete.delay {
  @include common.prefix-property(
    transition,
    width 750ms ease 1500ms,
    letter-spacing 750ms ease 1500ms
  );
  overflow: visible;
}

// Circle has already has a transition delay so no need to add one here.
.expand-options.active .button-circle {
  @include common.prefix-property(transform, translate(0, -50%) scale(1.5));
}

// When the circle is moving, there is no transition duration.
.expand-options.expand-complete .button-circle.active {
  @include common.prefix-property(transition, transform 750ms);
}

// When the circle is not moving, then it should gradually transition
// back to original position.
.expand-options.expand-complete .button-circle {
  @include common.prefix-property(
    transition,
    transform 750ms,
    left 750ms,
    top 750ms
  );
}

.expand-options.active span {
  opacity: 0;
}

.expand-options.expand-complete span {
  @include common.prefix-property(transition, opacity 740ms ease 750ms);
}

.visible {
  visibility: visible !important;
  opacity: 1 !important;
}

.disabled {
  pointer-events: none;
  touch-action: none;
}

.stacked {
  position: absolute;
}

/* Small devices (portrait tablets and large phones, 600px and up) */
@media only screen and (min-width: 600px) {
}

/* Medium devices (landscape tablets, 768px and up) */
@media only screen and (min-width: 768px) {
}

/* Large devices (laptops/desktops, 992px and up) */
@media only screen and (min-width: 992px) {
}

/* Extra large devices (large laptops and desktops, 1200px and up) */
@media only screen and (min-width: 1200px) {
}
